{"version":3,"sources":["Player.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Player","name","image","position","FFP","className","Avatar","alt","src","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","storage","App","useState","players","setPlayers","currentDate","Date","toLocaleDateString","useEffect","collection","orderBy","limit","onSnapshot","snapshot","docs","map","doc","id","player","data","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAsBeA,MAlBf,YAA+C,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,IAEvC,OAEG,yBAAKC,UAAU,UACX,yBAAKA,UAAU,gBACf,kBAACC,EAAA,EAAD,CACAD,UAAU,eACVE,IAAK,OACLC,IAAKN,KAGT,wBAAIG,UAAU,cAAa,0CAAwBJ,EAAnD,IAAyD,yCAAuBE,EAAhF,IAA0F,yCAAuBC,K,iBCJ/GK,EAVgBC,IAASC,cAAc,CACrCC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,kDACbC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,eACnBC,MAAO,8CAGMC,YACPT,IAASU,U,MC2BRC,MAlCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACGC,EADH,OAEUF,mBAAS,IAFnB,gCAGYA,mBAAS,KAHrB,gCAIkBA,mBAAS,KAJ3B,gCAKQA,mBAAS,IALjB,mBAMPG,GANO,WAMK,IAAIC,MAAOC,sBAW7B,OATAC,qBAAU,WACRnB,EAAGoB,WAAW,cAAcC,QAAQ,MAAO,QAAQC,MAAM,GAAGC,YAAW,SAAAC,GACrET,EAAWS,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAG,CACjCC,GAAGD,EAAIC,GACPC,OAAQF,EAAIG,iBAGhB,IAGA,yBAAKlC,UAAU,OACb,yBAAKA,UAAU,cACf,wBAAIA,UAAU,SAAd,qBACA,uBAAGA,UAAU,QAAb,aAA+BoB,EAA/B,aACE,yBAAKpB,UAAU,WAEbkB,EAAQY,KAAI,gBAAEE,EAAF,EAAEA,GAAIC,EAAN,EAAMA,OAAN,OACV,kBAAC,EAAD,CAAQE,IAAKH,EAAIpC,KAAMqC,EAAOrC,KAAMC,MAAOoC,EAAOpC,MAAOC,SAAUmC,EAAOnC,SAAUC,IAAKkC,EAAOlC,aCnBxFqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4de5921a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Player.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nfunction Player({name, image, position, FFP}) {\r\n    \r\n return (\r\n\r\n    <div className=\"player\">\r\n        <div className=\"playerHeader\">\r\n        <Avatar \r\n        className=\"playerAvatar\"\r\n        alt={\"name\"}\r\n        src={image}\r\n        />\r\n        </div>\r\n    <h4 className=\"playerText\"><strong>Name: </strong>{name} <strong>Pos: </strong>{position} <strong>FFP: </strong>{FFP}</h4>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Player;","import firebase from \"firebase\";\r\n\r\n    const firebaseApp=firebase.initializeApp({\r\n        apiKey: \"AIzaSyAzeOmwMXP5IJ0a-Wt_md7iE3y_Ya_Vsxg\",\r\n        authDomain: \"fantasy-football-players.firebaseapp.com\",\r\n        databaseURL: \"https://fantasy-football-players.firebaseio.com\",\r\n        projectId: \"fantasy-football-players\",\r\n        storageBucket: \"fantasy-football-players.appspot.com\",\r\n        messagingSenderId: \"559936098932\",\r\n        appId: \"1:559936098932:web:60ea67a0bee5275b813721\"\r\n    });\r\n    \r\nconst db=firebaseApp.firestore();\r\nconst storage=firebase.storage();\r\n\r\n  export {db, storage};","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Player from \"./Player\";\nimport {db} from \"./firebase\";\nimport 'moment-timezone';\n\nfunction App() {\n  const [players, setPlayers]=useState([]);\n  const [name, setName]= useState(\"\");\n  const [image, setImage]= useState(\"\");\n  const [position, setPosition]= useState(\"\");\n  const [FFP, setFFP]= useState(0);\n  const currentDate=new Date().toLocaleDateString();\n\n  useEffect(()=>{\n    db.collection(\"nflplayers\").orderBy(\"FFP\", \"desc\").limit(4).onSnapshot(snapshot=>{\n      setPlayers(snapshot.docs.map(doc=>({\n        id:doc.id, \n        player: doc.data()\n      })));\n    })\n  },[]);\n  \n  return (\n    <div className=\"app\">\n      <div className=\"component6\">\n      <h2 className=\"title\">Today's Hot Picks</h2>\n      <p className=\"date\"> ---------{currentDate}---------</p>\n        <div className=\"players\"> \n        {\n          players.map(({id, player})=>(\n            <Player key={id} name={player.name} image={player.image} position={player.position} FFP={player.FFP}/>\n          ))\n        }  \n        </div> \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}